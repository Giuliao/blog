<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Giuliao</title><link>https://giuliao.github.io/blog/posts/</link><description>Recent content in Posts on Giuliao</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 17 Sep 2022 22:58:56 +0800</lastBuildDate><atom:link href="https://giuliao.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>模块一：Go 语言特性</title><link>https://giuliao.github.io/blog/posts/geektime-cn/golang-chara/</link><pubDate>Sat, 17 Sep 2022 22:58:56 +0800</pubDate><guid>https://giuliao.github.io/blog/posts/geektime-cn/golang-chara/</guid><description>作业 课后练习 1.1 编写一个小程序： 给定一个字符串数组 [“I”,“am”,“stupid”,“and”,“weak”] 用 for 循环遍历该数组并修改为 [“I”,“am”,“smart”,“and”,“strong”]
func main() { initArr := []string{&amp;#34;I&amp;#34;, &amp;#34;am&amp;#34;, &amp;#34;stupid&amp;#34;, &amp;#34;and&amp;#34;, &amp;#34;weak&amp;#34;} for i, v := range initArr { if v == &amp;#34;stupid&amp;#34; { initArr[i] = &amp;#34;smart&amp;#34; } if v == &amp;#34;weak&amp;#34; { initArr[i] = &amp;#34;strong&amp;#34; } } fmt.Println(strings.Join(initArr, &amp;#34; &amp;#34;)) } 课后练习 1.2 基于 Channel 编写一个简单的单线程生产者消费者模型：
队列：队列长度 10，队列元素类型为 int 生产者：每 1 秒往队列中放入一个类型为 int 的元素，队列满时生产者可以阻塞 消费者：每一秒从队列中获取一个元素并打印，队列为空时消费者阻塞 func main() { que := make(chan int, 10) ticker := time.</description></item></channel></rss>