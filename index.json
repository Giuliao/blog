[{"content":"笔记 1. 线程加锁 sync.Mutex：Lock()加锁，Unlock()解锁 sync.RWMutex：不限制读，只限制并发写和并发读写 sync.WaitGroup：等待一组 goroutine 返回 sync.Once：保证某段代码只执行一次 sync.Cond：让一组 goroutine 在满足特定条件时被唤醒 2. 线程调度 进程和线程间共享 Memory Manage、fs、files、signal 调用线程不需要切换上下文，但仍然涉及系统调用 用户态线程解决了系统调用问题，Go 语言基于 GMP 实现用户态线程 3. Go 语言内存管理 4. 包引用与依赖管理，Makefile 项目编译 go mod replace 用法，使用原始 import 路径，替换源为私有地址\nmakefile\nroot: export ROOT=github.com/cncamp/golang; .PHONY: root release: echo \u0026#34;building httpserver binary\u0026#34; mkdir -p bin/amd64 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/amd64 . .PHONY: release 5. 动手编写一个 HTTP Server Go httpserver 底层实现（参考） 6. Go 语言调试 go 专属调试工具 dlv\nglog 日志工具\n性能分析工具\npprof 中 top 各个字段的含义（参考）： flat：函数在 CPU 上运行的时间 flat%：函数在CPU上运行时间的百分比 sum%：是从上到当前行所有函数累加使用 CPU 的比例 cum：这个函数以及子函数运行所占用的时间，应该大于等于flat cum%：这个函数以及子函数运行所占用的比例，应该大于等于flat% linux top 指标中的含义（参考）\n7. kubernetes 中如何使用 Go 语言 课后练习 2.1 将练习 1.2 中的生产者消费者模型修改为多个生产者和多个消费者模式 que := make(chan int, 10) ticker := time.NewTicker(time.Second) ctx, cancel := context.WithCancel(context.Background()) wg := sync.WaitGroup{} producerNum := 10 customerNum := 10 wg.Add(producerNum + customerNum) // producer for i := 0; i \u0026lt; producerNum; i++ { go func(n int) { for { select { case \u0026lt;-ticker.C: que \u0026lt;- n case \u0026lt;-ctx.Done(): wg.Done() fmt.Printf(\u0026#34;producer %d exit\\n\u0026#34;, n) return } } }(i) } // consumer for i := 0; i \u0026lt; customerNum; i++ { go func(n int) { for { select { case v := \u0026lt;-que: fmt.Printf(\u0026#34;consume data %d\\n\u0026#34;, v) case \u0026lt;-ctx.Done(): wg.Done() fmt.Printf(\u0026#34;consumer %d exit\\n\u0026#34;, n) return } } }(i) } time.Sleep(20 * time.Second) cancel() wg.Wait() 课后练习 2.2 接收客户端 request，并将 request 中带的 header 写入 response header 读取当前系统的环境变量中的 VERSION 配置，并写入 response header Server 端记录访问日志包括客户端 IP，HTTP 返回码，输出到 server 端的标准输出 当访问 localhost/healthz 时，应返回 200 // 参考：https://gist.github.com/Boerworz/b683e46ae0761056a636 type loggingResponseWriter struct { http.ResponseWriter statusCode int } func NewLoggingResponseWriter(w http.ResponseWriter) *loggingResponseWriter { // WriteHeader(int) is not called if our response implicitly returns 200 OK, so // we default to that status code. return \u0026amp;loggingResponseWriter{w, http.StatusOK} } func (lrw *loggingResponseWriter) WriteHeader(code int) { lrw.statusCode = code lrw.ResponseWriter.WriteHeader(code) } // getIP returns the ip address from the http request // 参考：https://gist.github.com/miguelmota/7b765edff00dc676215d6174f3f30216 func getIP(r *http.Request) (string, error) { ips := r.Header.Get(\u0026#34;X-Forwarded-For\u0026#34;) splitIps := strings.Split(ips, \u0026#34;,\u0026#34;) if len(splitIps) \u0026gt; 0 { // get last IP in list since ELB prepends other user defined IPs, meaning the last one is the actual client IP. netIP := net.ParseIP(splitIps[len(splitIps)-1]) if netIP != nil { return netIP.String(), nil } } ip, _, err := net.SplitHostPort(r.RemoteAddr) if err != nil { return \u0026#34;\u0026#34;, err } netIP := net.ParseIP(ip) if netIP != nil { ip := netIP.String() if ip == \u0026#34;::1\u0026#34; { return \u0026#34;127.0.0.1\u0026#34;, nil } return ip, nil } return \u0026#34;\u0026#34;, errors.New(\u0026#34;IP not found\u0026#34;) } // 每个请求都要记录日志需要使用拦截器 func interceptor(handler http.HandlerFunc) http.HandlerFunc { return func(w http.ResponseWriter, r *http.Request) { // 2. 读取当前系统的环境变量中的 VERSION 配置，并写入 response header w.Header().Add(\u0026#34;version\u0026#34;, os.Getenv(\u0026#34;VERSION\u0026#34;)) lrw := NewLoggingResponseWriter(w) handler(lrw, r) // 3.Server 端记录访问日志包括客户端 IP，HTTP 返回码，输出到 server 端的标准输出 addr, err := getIP(r) if err != nil { glog.Errorf(\u0026#34;get addr error %v\\n\u0026#34;, err) } glog.Infof(\u0026#34;response status code %d, ip addr %s\\n\u0026#34;, lrw.statusCode, addr) } } func main() { flag.Parse() http.HandleFunc(\u0026#34;/\u0026#34;, interceptor(func(w http.ResponseWriter, r *http.Request) { for k, v := range r.Header { // 1. 接收客户端 request，并将 request 中带的 header 写入 response header w.Header().Add(k, strings.Join(v, \u0026#34;, \u0026#34;)) } })) http.HandleFunc(\u0026#34;/healthz\u0026#34;, interceptor(func(w http.ResponseWriter, r *http.Request) { // 4. 当访问 localhost/healthz 时，应返回 200 w.WriteHeader(http.StatusBadRequest) })) http.ListenAndServe(\u0026#34;:3000\u0026#34;, nil) } ","permalink":"https://giuliao.github.io/blog/posts/geektime-cn/2-writing-go/","summary":"笔记 1. 线程加锁 sync.Mutex：Lock()加锁，Unlock()解锁 sync.RWMutex：不限制读，只限制并发写和并发读写 sync.WaitGroup：等待一组 goroutine 返回 sync.Once：保证某段代码只执行一次 sync.Cond：让一组 goroutine 在满足特定条件时被唤醒 2. 线程调度 进程和线程间共享 Memory Manage、fs、files、signal 调用线程不需要切换上下文，但仍然涉及系统调用 用户态线程解决了系统调用问题，Go 语言基于 GMP 实现用户态线程 3. Go 语言内存管理 4. 包引用与依赖管理，Makefile 项目编译 go mod replace 用法，使用原始 import 路径，替换源为私有地址\nmakefile\nroot: export ROOT=github.com/cncamp/golang; .PHONY: root release: echo \u0026#34;building httpserver binary\u0026#34; mkdir -p bin/amd64 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/amd64 . .PHONY: release 5. 动手编写一个 HTTP Server Go httpserver 底层实现（参考） 6. Go 语言调试 go 专属调试工具 dlv","title":"模块二：编写Go程序"},{"content":"作业 课后练习 1.1 编写一个小程序： 给定一个字符串数组 [“I”,“am”,“stupid”,“and”,“weak”] 用 for 循环遍历该数组并修改为 [“I”,“am”,“smart”,“and”,“strong”]\nfunc main() { initArr := []string{\u0026#34;I\u0026#34;, \u0026#34;am\u0026#34;, \u0026#34;stupid\u0026#34;, \u0026#34;and\u0026#34;, \u0026#34;weak\u0026#34;} for i, v := range initArr { if v == \u0026#34;stupid\u0026#34; { initArr[i] = \u0026#34;smart\u0026#34; } if v == \u0026#34;weak\u0026#34; { initArr[i] = \u0026#34;strong\u0026#34; } } fmt.Println(strings.Join(initArr, \u0026#34; \u0026#34;)) } 课后练习 1.2 基于 Channel 编写一个简单的单线程生产者消费者模型：\n队列：队列长度 10，队列元素类型为 int 生产者：每 1 秒往队列中放入一个类型为 int 的元素，队列满时生产者可以阻塞 消费者：每一秒从队列中获取一个元素并打印，队列为空时消费者阻塞 func main() { que := make(chan int, 10) ticker := time.NewTicker(time.Second) ctx, cancel := context.WithCancel(context.Background()) // producer go func() { for { select { case \u0026lt;-ticker.C: que \u0026lt;- 1 case \u0026lt;-ctx.Done(): fmt.Println(\u0026#34;producer exit\u0026#34;) return } } }() // consumer go func() { for { select { case v := \u0026lt;-que: fmt.Printf(\u0026#34;consume data %d\\n\u0026#34;, v) case \u0026lt;-ctx.Done(): fmt.Println(\u0026#34;consumer exit\u0026#34;) return } } }() time.Sleep(time.Second * 10) cancel() time.Sleep(time.Second * 2) } ","permalink":"https://giuliao.github.io/blog/posts/geektime-cn/1-golang-chara/","summary":"作业 课后练习 1.1 编写一个小程序： 给定一个字符串数组 [“I”,“am”,“stupid”,“and”,“weak”] 用 for 循环遍历该数组并修改为 [“I”,“am”,“smart”,“and”,“strong”]\nfunc main() { initArr := []string{\u0026#34;I\u0026#34;, \u0026#34;am\u0026#34;, \u0026#34;stupid\u0026#34;, \u0026#34;and\u0026#34;, \u0026#34;weak\u0026#34;} for i, v := range initArr { if v == \u0026#34;stupid\u0026#34; { initArr[i] = \u0026#34;smart\u0026#34; } if v == \u0026#34;weak\u0026#34; { initArr[i] = \u0026#34;strong\u0026#34; } } fmt.Println(strings.Join(initArr, \u0026#34; \u0026#34;)) } 课后练习 1.2 基于 Channel 编写一个简单的单线程生产者消费者模型：\n队列：队列长度 10，队列元素类型为 int 生产者：每 1 秒往队列中放入一个类型为 int 的元素，队列满时生产者可以阻塞 消费者：每一秒从队列中获取一个元素并打印，队列为空时消费者阻塞 func main() { que := make(chan int, 10) ticker := time.","title":"模块一：Go 语言特性"}]